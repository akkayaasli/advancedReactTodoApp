{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asl\\u0131 Akkaya\\\\reactSSTTEK\\\\odev1\\\\todolist\\\\basicReactTodoApp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\"; /*React bileşenlerini içe aktarır. Bunlar useState ve useEffect gibi React hook'larıdır.*/\n// useState hook'u kullanılarak, bileşenin içinde üç farklı durumu (state) tanımlarız.\n\nimport \"./TodoList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoList() {\n  _s();\n  const [list, setList] = useState([]); //boş bir dizi (array),\n  const [input, setInput] = useState(\"\"); //boş bir metin dizisi (string)\n  const [editedTask, setEditedTask] = useState(null); //null değeri ile başlayan bir değişken\n\n  /*deleteTodo bir görevin silinmesini işler ve id adında bir parametre alır. Bu id, silinecek görevin kimliğini temsil eder.*/\n  const deleteTodo = id => {\n    /*list dizisi üzerinde filter fonksiyonu kullanılır. filter fonksiyonu, bir dizi içindeki öğeleri belirli bir koşula göre filtreler ve yeni bir dizi döndürür.*/\n    const newList = list.filter(todo => todo.id !== id); /* list dizisini tarar ve her bir öğeyi todo adı verilen bir değişkene atar.*/\n    /*Her öğe, todo.id !== id koşulunu karşılayıp karşılamadığını kontrol eder. Seçilen id ile silinmek istenen aynı değilse korunur.*/\n\n    setList(newList); // newList adlı yeni diziyi list durumuyla günceller.Güncel görev listesi artık burada.\n  };\n\n  //---güncelleme butonu işlemleri\n  const editTask = id => {\n    setEditedTask(id);\n    /*id parametresini alır ve editedTask adlı bir durum değişkenini bu id ile günceller. Bu, düzenleme işleminin hangi görev üzerinde gerçekleştirileceğini belirtir.*/\n  };\n\n  const saveEditedTask = (id, newTask) => {\n    /*düzenlenen görevin kaydedilmesini ve güncellenmiş görev listesinin oluşturulmasını işler. Bu işlev iki parametre alır*/\n    const updatedList = list.map(todo => /*list dizisi üzerinde map fonksiyonu kullanılır. map fonksiyonu, her öğeyi işlemek için kullanılır.*/\n    todo.id === id ? {\n      ...todo,\n      gorev: newTask\n    } : todo\n    /*  1-todo ifadesi, her bir görev öğesini kontrol eder.\n        2-Eğer todo öğesinin id özelliği, düzenlemek istenen id ile eşleşiyorsa, bu görevin içeriğini (gorev) newTask ile değiştirir ve \n        bu şekilde güncellenmiş bir görev öğesi oluşturur.\n        3-Eğer id eşleşmiyorsa, görev öğesini değiştirmeden aynı şekilde bırakır.*/);\n\n    setList(updatedList);\n    /*güncellenmiş görev listesini list durumuyla değiştirir.Kullanıcı ekranda güncel listeyi görür.*/\n    setEditedTask(null);\n    /*editedTask durumunu sıfırlar. Bu, düzenleme işleminin tamamlandığını ve herhangi bir görevin düzenlenmediğini belirtir.*/\n  }; //---güncelleme butonu işlemleri\n\n  // Görev ekleme işlevi\n  const addTask = () => {\n    if (input.trim() === '') {\n      // Eğer görev boşsa hata mesajı göster\n\n      alert(\"Yapılacaklar girişine boş metin eklenemez.\");\n    } else {\n      // Görevi listeye ekleyin ve hata mesajını temizleyin\n      const newGorev = {\n        id: Math.random(),\n        gorev: input\n      };\n      setList([...list, newGorev]);\n      setInput('');\n      alert('Görev ekleme işlemi başarılı.');\n    }\n  };\n\n  // Sayfa yüklendiğinde listedeki verileri local storage den almak\n  useEffect(() => {\n    const localDatas = JSON.parse(localStorage.getItem(\"taskList\"));\n    /*yerel depolamadan (\"taskList\" adlı bir anahtarla) kaydedilmiş olan verileri çekmeyi dener. \n    localStorage.getItem işlevi kullanılarak belirli bir anahtardaki veri alınır. */\n    if (localDatas) {\n      /*Bu koşul, localDatas değişkeninin null olup olmadığını kontrol eder. \n      Yani, yerel depolamada \"taskList\" verisi varsa ve başarılı bir şekilde çözülüp bir JavaScript nesnesine dönüştürüldüyse, bu koşul doğru olur.*/\n      setList(localDatas);\n      /*Eğer koşul doğruysa, setList işlevi kullanılarak bileşenin içindeki list durum değişkeni localDatas ile güncellenir.*/\n    }\n  }, []);\n\n  // Liste her güncellendiğinde local storage de güncellenmesi\n  /**/\n  useEffect(() => {\n    localStorage.setItem(\"taskList\", JSON.stringify(list));\n    /*list dizisi, JavaScript nesnelerini bir JSON dizesine dönüştüren JSON.stringify işlemi ile bir dizeye çevrilir \n    ve bu dize \"taskList\" adlı anahtar altında localde saklanır.\n    */\n  }, [list]);\n\n  // Eğer listede hiçbir iş yoksa To-Do List yazısını “Yeşil”, varsa “Siyah” olarak göstermek için;\n  const isListEmpty = list.length === 0;\n\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: isListEmpty ? \"green\" : \"black\"\n      },\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"todo-input\",\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundColor: \"green\",\n        color: \"white\"\n      },\n      onClick: addTask,\n      children: \"EKLE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              marginRight: \"10px\"\n            },\n            children: \"G\\xF6rev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: \"\\u0130\\u015Flemler\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: list.map(todo => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: editedTask === todo.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: todo.gorev,\n                onChange: e => saveEditedTask(todo.id, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => saveEditedTask(todo.id, todo.gorev),\n                children: \"KAYDET\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: todo.gorev\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: \"red\",\n                color: \"white\",\n                marginRight: \"10px\"\n              },\n              onClick: () => deleteTodo(todo.id),\n              children: \"S\\u0130L\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: \"yellow\",\n                color: \"gray\",\n                marginLeft: \"10px\"\n              },\n              onClick: () => editTask(todo.id),\n              children: \"D\\xDCZENLE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, todo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoList, \"NCpfnIWCuXPujoEbXX+LR1uFqHA=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TodoList","_s","list","setList","input","setInput","editedTask","setEditedTask","deleteTodo","id","newList","filter","todo","editTask","saveEditedTask","newTask","updatedList","map","gorev","addTask","trim","alert","newGorev","Math","random","localDatas","JSON","parse","localStorage","getItem","setItem","stringify","isListEmpty","length","className","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","backgroundColor","onClick","marginRight","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/Aslı Akkaya/reactSSTTEK/odev1/todolist/basicReactTodoApp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\"; /*React bileşenlerini içe aktarır. Bunlar useState ve useEffect gibi React hook'larıdır.*/\n// useState hook'u kullanılarak, bileşenin içinde üç farklı durumu (state) tanımlarız.\n\nimport \"./TodoList.css\";\n\n\n\n\nfunction TodoList() {\n  const [list, setList] = useState([]);//boş bir dizi (array),\n  const [input, setInput] = useState(\"\");//boş bir metin dizisi (string)\n  const [editedTask, setEditedTask] = useState(null);//null değeri ile başlayan bir değişken\n\n\n\n\n\n\n  /*deleteTodo bir görevin silinmesini işler ve id adında bir parametre alır. Bu id, silinecek görevin kimliğini temsil eder.*/\n  const deleteTodo = (id) => {\n    /*list dizisi üzerinde filter fonksiyonu kullanılır. filter fonksiyonu, bir dizi içindeki öğeleri belirli bir koşula göre filtreler ve yeni bir dizi döndürür.*/\n    const newList = list.filter((todo) => todo.id !== id);/* list dizisini tarar ve her bir öğeyi todo adı verilen bir değişkene atar.*/\n    /*Her öğe, todo.id !== id koşulunu karşılayıp karşılamadığını kontrol eder. Seçilen id ile silinmek istenen aynı değilse korunur.*/\n\n    setList(newList);// newList adlı yeni diziyi list durumuyla günceller.Güncel görev listesi artık burada.\n  }\n\n\n\n\n\n  //---güncelleme butonu işlemleri\n  const editTask = (id) => {\n    setEditedTask(id);\n    /*id parametresini alır ve editedTask adlı bir durum değişkenini bu id ile günceller. Bu, düzenleme işleminin hangi görev üzerinde gerçekleştirileceğini belirtir.*/\n\n  };\n\n  const saveEditedTask = (id, newTask) => {\n    /*düzenlenen görevin kaydedilmesini ve güncellenmiş görev listesinin oluşturulmasını işler. Bu işlev iki parametre alır*/\n    const updatedList = list.map((todo) =>\n      /*list dizisi üzerinde map fonksiyonu kullanılır. map fonksiyonu, her öğeyi işlemek için kullanılır.*/\n      todo.id === id ? { ...todo, gorev: newTask } : todo\n      /*  1-todo ifadesi, her bir görev öğesini kontrol eder.\n          2-Eğer todo öğesinin id özelliği, düzenlemek istenen id ile eşleşiyorsa, bu görevin içeriğini (gorev) newTask ile değiştirir ve \n          bu şekilde güncellenmiş bir görev öğesi oluşturur.\n          3-Eğer id eşleşmiyorsa, görev öğesini değiştirmeden aynı şekilde bırakır.*/\n    );\n    setList(updatedList);\n    /*güncellenmiş görev listesini list durumuyla değiştirir.Kullanıcı ekranda güncel listeyi görür.*/\n    setEditedTask(null);\n    /*editedTask durumunu sıfırlar. Bu, düzenleme işleminin tamamlandığını ve herhangi bir görevin düzenlenmediğini belirtir.*/\n  }; //---güncelleme butonu işlemleri\n\n\n\n\n\n  // Görev ekleme işlevi\n  const addTask = () => {\n    if (input.trim() === '') {\n      // Eğer görev boşsa hata mesajı göster\n\n      alert(\"Yapılacaklar girişine boş metin eklenemez.\");\n    } else {\n      // Görevi listeye ekleyin ve hata mesajını temizleyin\n      const newGorev = {\n        id: Math.random(),\n        gorev: input,\n      };\n      setList([...list, newGorev]);\n      setInput('');\n      alert('Görev ekleme işlemi başarılı.');\n    }\n  };\n\n\n  // Sayfa yüklendiğinde listedeki verileri local storage den almak\n  useEffect(() => {\n    const localDatas = JSON.parse(localStorage.getItem(\"taskList\"));\n    /*yerel depolamadan (\"taskList\" adlı bir anahtarla) kaydedilmiş olan verileri çekmeyi dener. \n    localStorage.getItem işlevi kullanılarak belirli bir anahtardaki veri alınır. */\n    if (localDatas) {\n      /*Bu koşul, localDatas değişkeninin null olup olmadığını kontrol eder. \n      Yani, yerel depolamada \"taskList\" verisi varsa ve başarılı bir şekilde çözülüp bir JavaScript nesnesine dönüştürüldüyse, bu koşul doğru olur.*/\n      setList(localDatas);\n      /*Eğer koşul doğruysa, setList işlevi kullanılarak bileşenin içindeki list durum değişkeni localDatas ile güncellenir.*/\n    }\n  }, []);\n\n\n\n  // Liste her güncellendiğinde local storage de güncellenmesi\n  /**/\n  useEffect(() => {\n    localStorage.setItem(\"taskList\", JSON.stringify(list));\n    /*list dizisi, JavaScript nesnelerini bir JSON dizesine dönüştüren JSON.stringify işlemi ile bir dizeye çevrilir \n    ve bu dize \"taskList\" adlı anahtar altında localde saklanır.\n*/\n  }, [list]);\n\n\n\n\n\n\n\n\n\n  // Eğer listede hiçbir iş yoksa To-Do List yazısını “Yeşil”, varsa “Siyah” olarak göstermek için;\n  const isListEmpty = list.length === 0;\n\n\n  // ...\n\n  return (\n    <div className=\"todo-container\">\n      {/* Eğer isListEmpty true ise (yani liste boşsa), başlık rengi \"green\" (yeşil) olur, aksi takdirde \"black\" (siyah) olur. */}\n\n      <h1 style={{ color: isListEmpty ? \"green\" : \"black\" }}>Todo List</h1>\n      <input\n        className=\"todo-input\"\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      />\n      <button style={{ backgroundColor: \"green\", color: \"white\" }} onClick={addTask}>EKLE</button>\n      <table>\n        <thead>\n          <tr>\n            <th style={{ marginRight: \"10px\" }}>Görev</th>\n            <th style={{ marginLeft: \"10px\" }}>İşlemler</th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((todo) => (\n            <tr key={todo.id}>\n              <td>\n                {editedTask === todo.id ? (\n                  <div>\n                    <input\n                      type=\"text\"\n                      value={todo.gorev}\n                      onChange={(e) => saveEditedTask(todo.id, e.target.value)}\n\n                    />\n                    <button onClick={() => saveEditedTask(todo.id, todo.gorev)}>\n                      KAYDET\n                    </button>\n                  </div>\n                ) : (\n                  <div>{todo.gorev}</div>\n                )}\n              </td>\n              <td>\n                <button style={{ backgroundColor: \"red\", color: \"white\", marginRight: \"10px\" }} onClick={() => deleteTodo(todo.id)}>SİL</button>\n\n                <button style={{ backgroundColor: \"yellow\", color: \"gray\", marginLeft: \"10px\" }} onClick={() => editTask(todo.id)}>DÜZENLE</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n\n}\n\nexport default TodoList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}