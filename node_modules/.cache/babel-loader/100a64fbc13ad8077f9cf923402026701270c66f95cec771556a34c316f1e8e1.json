{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asl\\u0131 Akkaya\\\\reactSSTTEK\\\\odev1\\\\todolist\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoList() {\n  _s();\n  const [list, setList] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const deleteTodo = id => {\n    const newList = list.filter(todo => todo.id !== id);\n    setList(newList);\n  };\n\n  // Görev ekleme işlevi\n  const addTask = () => {\n    if (input.trim() === '') {\n      // Eğer görev boşsa hata mesajı göster\n\n      alert(\"Yapılacaklar girişine boş metin eklenemez.\");\n    } else {\n      // Görevi listeye ekleyin ve hata mesajını temizleyin\n      const newGorev = {\n        id: Math.random(),\n        gorev: input\n      };\n      setList([...list, newGorev]);\n      setInput('');\n      alert('Görev ekleme işlemi başarılı.');\n    }\n  };\n\n  // Sayfa yüklendiğinde listedeki verileri yerel depolamadan alın\n  useEffect(() => {\n    const savedList = JSON.parse(localStorage.getItem(\"todoList\"));\n    if (savedList) {\n      setList(savedList);\n    }\n  }, []);\n\n  // Eğer listede hiçbir iş yoksa To-Do List yazısını “Yeşil”, varsa “Siyah” olarak göstermek için;\n  const isListEmpty = list.length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: isListEmpty ? \"green\" : \"black\"\n      },\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Ekle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [todo.gorev, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTodo(todo.id),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoList, \"nZut0L3guj0W58GopXnGN2abBzM=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TodoList","_s","list","setList","input","setInput","deleteTodo","id","newList","filter","todo","addTask","trim","alert","newGorev","Math","random","gorev","savedList","JSON","parse","localStorage","getItem","isListEmpty","length","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/Aslı Akkaya/reactSSTTEK/odev1/todolist/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction TodoList() {\n  const [list, setList] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n\n  const deleteTodo = (id) => {\n    const newList = list.filter((todo) => todo.id !== id);\n    setList(newList);\n  }\n\n  // Görev ekleme işlevi\n  const addTask = () => {\n    if (input.trim() === '') {\n      // Eğer görev boşsa hata mesajı göster\n\n      alert(\"Yapılacaklar girişine boş metin eklenemez.\");\n    } else {\n      // Görevi listeye ekleyin ve hata mesajını temizleyin\n      const newGorev = {\n        id: Math.random(),\n        gorev: input,\n      };\n      setList([...list, newGorev]);\n      setInput('');\n      alert('Görev ekleme işlemi başarılı.');\n    }\n  };\n\n\n  // Sayfa yüklendiğinde listedeki verileri yerel depolamadan alın\n  useEffect(() => {\n    const savedList = JSON.parse(localStorage.getItem(\"todoList\"));\n    if (savedList) {\n      setList(savedList);\n    }\n  }, []);\n\n\n\n\n\n  // Eğer listede hiçbir iş yoksa To-Do List yazısını “Yeşil”, varsa “Siyah” olarak göstermek için;\n  const isListEmpty = list.length === 0;\n\n\n  return (\n    <div>\n      <h1 style={{ color: isListEmpty ? \"green\" : \"black\" }}>Todo List</h1>\n\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)} />\n\n      <button onClick={addTask}>Ekle</button>\n\n\n      <ul>\n        {list.map((todo) => (\n          <li key={todo.id}>\n            {todo.gorev}\n            <button onClick={() => deleteTodo(todo.id)}>&times;</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}